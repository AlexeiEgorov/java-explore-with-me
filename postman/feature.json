{
	"info": {
		"_postman_id": "780791a8-c397-4ee6-8e39-33e6271cb7c3",
		"name": "feature_comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29048838"
	},
	"item": [
		{
			"name": "Добавление комментария 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, createdAt, text, commentator, event\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('createdAt');\r",
							"pm.expect(target).to.have.property('lastUpdated');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).equal(1);\r",
							"    pm.expect(source.text).equal(target.text);\r",
							"    pm.expect(target.event).equal(2);\r",
							"    pm.expect(target.commentator.id).equal(1);\r",
							"    pm.expect(target.commentator.name).to.not.be.null;\r",
							"    pm.expect(target.createdAt).to.not.be.null;\r",
							"    pm.expect(target.lastUpdated).to.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Added comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "2"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, createdAt, text, commentator, event\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('createdAt');\r",
							"pm.expect(target).to.have.property('lastUpdated');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).equal(2);\r",
							"    pm.expect(source.text).equal(target.text);\r",
							"    pm.expect(target.event).equal(2);\r",
							"    pm.expect(target.commentator.id).equal(1);\r",
							"    pm.expect(target.commentator.name).to.not.be.null;\r",
							"    pm.expect(target.createdAt).to.not.be.null;\r",
							"    pm.expect(target.lastUpdated).to.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Added comment2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "2"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение события с комментариями",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"pm.test(\"Размер списка должен равняться 2\", function() {\r",
							"    pm.expect(jsonData.comments.length, 'Размер списка должен равняться 2').to.eql(2);\r",
							"})\r",
							"\r",
							"pm.test(\"Тест поля 'id' comments\", function () {\r",
							"    pm.expect(jsonData.comments[0]).to.have.property('id');\r",
							"    pm.expect(jsonData.comments[1]).to.have.property('id');\r",
							"    pm.expect(jsonData.comments[0].id, 'Поле \"id\" должно равняться: 1').to.eql(1);\r",
							"    pm.expect(jsonData.comments[1].id, 'Поле \"id\" должно равняться: 1').to.eql(2);\r",
							"});\r",
							"pm.test(\"Тест поля 'text' comments\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.comments[0]).to.have.property('text');\r",
							"    pm.expect(jsonData.comments[0].text, 'Поле \"text\" должно равняться: Added comment').to.eql('Added comment');\r",
							"    pm.expect(jsonData.comments[1]).to.have.property('text');\r",
							"    pm.expect(jsonData.comments[1].text, 'Поле \"text\" должно равняться: Added comment').to.eql('Added comment2');\r",
							"});\r",
							"pm.test(\"Тест поля 'event' comments\", function () {\r",
							"    pm.expect(jsonData.comments[0]).to.have.property('event');\r",
							"    pm.expect(jsonData.comments[0].event, 'Поле \"event\" должно равняться: 1').to.eql(2);\r",
							"    pm.expect(jsonData.comments[1]).to.have.property('event');\r",
							"    pm.expect(jsonData.comments[1].event, 'Поле \"event\" должно равняться: 1').to.eql(2);\r",
							"});\r",
							"pm.test(\"Тест поля 'userId' comments\", function () {\r",
							"    pm.expect(jsonData.comments[0]).to.have.property('commentator');\r",
							"    pm.expect(jsonData.comments[0].commentator.id, 'Поле \"userId\" должно равняться: 1').to.eql(1);\r",
							"    pm.expect(jsonData.comments[1]).to.have.property('commentator');\r",
							"    pm.expect(jsonData.comments[1].commentator.id, 'Поле \"userId\" должно равняться: 1').to.eql(1);\r",
							"    pm.expect(jsonData.comments[0].commentator.name, 'Поле \"name\"').not.to.eql(null);\r",
							"    pm.expect(jsonData.comments[1].commentator.name, 'Поле \"name\"').not.to.eql(null);\r",
							"});\r",
							"pm.test(\"Тест поля 'created' comments\", function () {\r",
							"    pm.expect(jsonData.comments[0]).to.have.property('createdAt');\r",
							"    pm.expect(jsonData.comments[0].createdAt, 'Поле \"created\" не должно быть null').to.not.be.null;\r",
							"    pm.expect(jsonData.comments[0]).to.have.property('createdAt');\r",
							"    pm.expect(jsonData.comments[1].createdAt, 'Поле \"created\" не должно быть null').to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Тест поля 'lastUpdated' comments\", function () {\r",
							"    pm.expect(jsonData.comments[0]).to.have.property('lastUpdated');\r",
							"    pm.expect(jsonData.comments[0].lastUpdated, 'Поле \"upd\" должно быть null').to.be.null;\r",
							"    pm.expect(jsonData.comments[1]).to.have.property('lastUpdated');\r",
							"    pm.expect(jsonData.comments[1].lastUpdated, 'Поле \"upd\" должно быть null').to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "2",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение события пользователя, проверка счетчика комментариев",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"pm.test(\"Тест поля 'comments'\", function () {\r",
							"    pm.expect(jsonData).to.have.property('comments');\r",
							"    pm.expect(jsonData.comments, 'Поле должно равняться: 2').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":id"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"pm.test(\"Размер списка должен равняться 2\", function() {\r",
							"    pm.expect(jsonData.length, 'Размер списка должен равняться 2').to.eql(2);\r",
							"})\r",
							"\r",
							"pm.test(\"Тест поля 'id' comments\", function () {\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[1]).to.have.property('id');\r",
							"    pm.expect(jsonData[0].id, 'Поле \"id\" должно равняться: 1').to.eql(1);\r",
							"    pm.expect(jsonData[1].id, 'Поле \"id\" должно равняться: 1').to.eql(2);\r",
							"});\r",
							"pm.test(\"Тест поля 'text' comments\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('text');\r",
							"    pm.expect(jsonData[0].text, 'Поле \"text\" должно равняться: Added comment').to.eql('Added comment');\r",
							"    pm.expect(jsonData[1]).to.have.property('text');\r",
							"    pm.expect(jsonData[1].text, 'Поле \"text\" должно равняться: Added comment').to.eql('Added comment2');\r",
							"});\r",
							"pm.test(\"Тест поля 'event' comments\", function () {\r",
							"    pm.expect(jsonData[0]).to.have.property('event');\r",
							"    pm.expect(jsonData[0].event.id, 'Поле \"userId\" должно равняться: 1').to.eql(2);\r",
							"    pm.expect(jsonData[1]).to.have.property('event');\r",
							"    pm.expect(jsonData[1].event.id, 'Поле \"userId\" должно равняться: 1').to.eql(2);\r",
							"    pm.expect(jsonData[0].event.title, 'Поле \"name\"').not.to.eql(null);\r",
							"    pm.expect(jsonData[1].event.title, 'Поле \"name\"').not.to.eql(null);\r",
							"});\r",
							"pm.test(\"Тест поля 'created' comments\", function () {\r",
							"    pm.expect(jsonData[0]).to.have.property('createdAt');\r",
							"    pm.expect(jsonData[0].createdAt, 'Поле \"created\" не должно быть null').to.not.be.null;\r",
							"    pm.expect(jsonData[0]).to.have.property('createdAt');\r",
							"    pm.expect(jsonData[1].createdAt, 'Поле \"created\" не должно быть null').to.not.be.null;\r",
							"});\r",
							"pm.test(\"Тест поля 'lastUpdated' comments\", function () {\r",
							"    pm.expect(jsonData[0]).to.have.property('lastUpdated');\r",
							"    pm.expect(jsonData[0].lastUpdated, 'Поле \"upd\" должно быть null').to.be.null;\r",
							"    pm.expect(jsonData[1]).to.have.property('lastUpdated');\r",
							"    pm.expect(jsonData[1].lastUpdated, 'Поле \"upd\" должно быть null').to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0",
							"description": "количество элементов, которые нужно пропустить для формирования текущего набора"
						},
						{
							"key": "size",
							"value": "10",
							"description": "количество элементов в наборе"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, createdAt, text, commentator, event\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('createdAt');\r",
							"pm.expect(target).to.have.property('lastUpdated');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).equal(1);\r",
							"    pm.expect(source.text).equal(target.text);\r",
							"    pm.expect(target.event).equal(2);\r",
							"    pm.expect(target.commentator.id).equal(1);\r",
							"    pm.expect(target.commentator.name).to.not.be.null;\r",
							"    pm.expect(target.createdAt).to.not.be.null;\r",
							"    pm.expect(target.lastUpdated).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Added spam\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, createdAt, text, commentator, event\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('createdAt');\r",
							"pm.expect(target).to.have.property('lastUpdated');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).equal(1);\r",
							"    pm.expect(source.text).equal(target.text);\r",
							"    pm.expect(target.event).equal(2);\r",
							"    pm.expect(target.commentator.id).equal(1);\r",
							"    pm.expect(target.commentator.name).to.not.be.null;\r",
							"    pm.expect(target.createdAt).to.not.be.null;\r",
							"    pm.expect(target.lastUpdated).to.not.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Clean spam\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария автором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария администратором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": " http://localhost:8080"
		},
		{
			"key": "Event ID",
			"value": "{(eid)}"
		},
		{
			"key": "eid",
			"value": "eid"
		},
		{
			"key": "uid",
			"value": "uid"
		}
	]
}